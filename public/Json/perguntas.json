{
  "iniciante": [
    {
      "id": 41,
      "pergunta": "Qual a principal diferença entre `let` e `const`?",
      "opcoes": [
        {"texto": "`let` é para texto e `const` é para números.", "correta": false},
        {"texto": "Uma variável `let` pode ter seu valor reatribuído, enquanto uma `const` não pode.", "correta": true},
        {"texto": "`const` é para variáveis globais e `let` para locais.", "correta": false},
        {"texto": "Não há diferença, são apenas nomes diferentes.", "correta": false}
      ]
    },
    {
      "id": 42,
      "pergunta": "O que o valor `undefined` representa?",
      "opcoes": [
        {"texto": "Um erro no código.", "correta": false},
        {"texto": "Que uma variável foi declarada, mas ainda não teve um valor atribuído.", "correta": true},
        {"texto": "Um valor nulo ou vazio intencional.", "correta": false},
        {"texto": "O número zero.", "correta": false}
      ]
    },
    {
      "id": 43,
      "pergunta": "Como você cria um array vazio chamado `lista`?",
      "opcoes": [
        {"texto": "let lista = {};", "correta": false},
        {"texto": "let lista = [];", "correta": true},
        {"texto": "let lista = ();", "correta": false},
        {"texto": "let lista = new Array;", "correta": false}
      ]
    },
    {
      "id": 44,
      "pergunta": "Qual operador representa a lógica 'E' (ambas as condições devem ser verdadeiras)?",
      "opcoes": [
        {"texto": "||", "correta": false},
        {"texto": "&&", "correta": true},
        {"texto": "!", "correta": false},
        {"texto": "&", "correta": false}
      ]
    },
    {
      "id": 45,
      "pergunta": "Qual operador representa a lógica 'OU' (pelo menos uma condição deve ser verdadeira)?",
      "opcoes": [
        {"texto": "&&", "correta": false},
        {"texto": "||", "correta": true},
        {"texto": "|", "correta": false},
        {"texto": "OR", "correta": false}
      ]
    },
    {
      "id": 46,
      "pergunta": "Como você concatena as strings 'Olá' e 'Mundo'?",
      "opcoes": [
        {"texto": "'Olá' - 'Mundo'", "correta": false},
        {"texto": "'Olá' + 'Mundo'", "correta": true},
        {"texto": "'Olá' & 'Mundo'", "correta": false},
        {"texto": "concat('Olá', 'Mundo')", "correta": false}
      ]
    },
    {
      "id": 47,
      "pergunta": "Qual é a propriedade que retorna o número de caracteres de uma string `str`?",
      "opcoes": [
        {"texto": "str.size", "correta": false},
        {"texto": "str.length", "correta": true},
        {"texto": "str.count", "correta": false},
        {"texto": "str.index", "correta": false}
      ]
    },
    {
      "id": 48,
      "pergunta": "Como você define um objeto literal com uma propriedade `nome` e valor 'Ana'?",
      "opcoes": [
        {"texto": "let user = ('nome': 'Ana');", "correta": false},
        {"texto": "let user = {'nome': 'Ana'};", "correta": true},
        {"texto": "let user = ['nome': 'Ana'];", "correta": false},
        {"texto": "let user = <nome='Ana'>;", "correta": false}
      ]
    },
    {
      "id": 49,
      "pergunta": "Qual o resultado de `!true`?",
      "opcoes": [
        {"texto": "true", "correta": false},
        {"texto": "false", "correta": true},
        {"texto": "undefined", "correta": false},
        {"texto": "Erro", "correta": false}
      ]
    },
    {
      "id": 50,
      "pergunta": "Como você chama/invoca uma função chamada `saudacao`?",
      "opcoes": [
        {"texto": "chamar saudacao;", "correta": false},
        {"texto": "saudacao();", "correta": true},
        {"texto": "saudacao;", "correta": false},
        {"texto": "go saudacao();", "correta": false}
      ]
    },
    {
      "id": 51,
      "pergunta": "Qual a finalidade de usar 'template literals' (ex: `` `Olá, ${nome}` ``)?",
      "opcoes": [
        {"texto": "Para criar comentários de múltiplas linhas.", "correta": false},
        {"texto": "Para permitir a interpolação de variáveis e expressões dentro de strings de forma mais fácil.", "correta": true},
        {"texto": "Para definir o tipo de uma variável como string.", "correta": false},
        {"texto": "Para comparar duas strings.", "correta": false}
      ]
    },
    {
      "id": 52,
      "pergunta": "Qual o resultado da expressão `let x = 10; x++;`?",
      "opcoes": [
        {"texto": "10", "correta": false},
        {"texto": "11", "correta": true},
        {"texto": "9", "correta": false},
        {"texto": "x1", "correta": false}
      ]
    },
    {
      "id": 53,
      "pergunta": "Qual função nativa exibe uma caixa de diálogo com uma mensagem para o usuário?",
      "opcoes": [
        {"texto": "console.log()", "correta": false},
        {"texto": "alert()", "correta": true},
        {"texto": "prompt()", "correta": false},
        {"texto": "confirm()", "correta": false}
      ]
    },
    {
      "id": 54,
      "pergunta": "Qual é a sintaxe para um parâmetro `nome` em uma função `saudacao`?",
      "opcoes": [
        {"texto": "function saudacao(var nome) {}", "correta": false},
        {"texto": "function saudacao(nome) {}", "correta": true},
        {"texto": "function(nome) saudacao {}", "correta": false},
        {"texto": "function saudacao() { let nome; }", "correta": false}
      ]
    },
    {
      "id": 55,
      "pergunta": "Como se chama a conversão automática de tipos que o JavaScript faz (ex: `5 == '5'`)?",
      "opcoes": [
        {"texto": "Tipagem Estática", "correta": false},
        {"texto": "Coerção de Tipo", "correta": true},
        {"texto": "Herança", "correta": false},
        {"texto": "Compilação", "correta": false}
      ]
    },
    {
      "id": 56,
      "pergunta": "Qual operador é usado para comparar se um número é 'maior ou igual' a outro?",
      "opcoes": [
        {"texto": ">", "correta": false},
        {"texto": ">=", "correta": true},
        {"texto": "=>", "correta": false},
        {"texto": "=<", "correta": false}
      ]
    },
    {
      "id": 57,
      "pergunta": "O que a função `prompt()` faz?",
      "opcoes": [
        {"texto": "Imprime um valor no console.", "correta": false},
        {"texto": "Exibe uma caixa de diálogo que solicita uma entrada do usuário.", "correta": true},
        {"texto": "Confirma uma ação com o usuário.", "correta": false},
        {"texto": "Exibe uma mensagem de alerta.", "correta": false}
      ]
    },
    {
      "id": 58,
      "pergunta": "Qual método de string a transforma em letras maiúsculas?",
      "opcoes": [
        {"texto": ".upperCase()", "correta": false},
        {"texto": ".toUpperCase()", "correta": true},
        {"texto": ".toUpper()", "correta": false},
        {"texto": ".makeUpper()", "correta": false}
      ]
    },
    {
      "id": 59,
      "pergunta": "Qual o valor de `idade` após a execução de `let idade = 20; idade = 21;`?",
      "opcoes": [
        {"texto": "20", "correta": false},
        {"texto": "21", "correta": true},
        {"texto": "41", "correta": false},
        {"texto": "Erro", "correta": false}
      ]
    },
    {
      "id": 60,
      "pergunta": "Para que serve a palavra-chave `return` dentro de uma função?",
      "opcoes": [
        {"texto": "Para imprimir um valor no console.", "correta": false},
        {"texto": "Para especificar o valor que a função deve produzir ou 'enviar de volta'.", "correta": true},
        {"texto": "Para reiniciar a função.", "correta": false},
        {"texto": "Para declarar uma variável.", "correta": false}
      ]
    }
  ],
  "intermediario": [
    {
      "id": 61,
      "pergunta": "Qual método remove o último elemento de um array e retorna esse elemento?",
      "opcoes": [
        {"texto": "shift()", "correta": false},
        {"texto": "pop()", "correta": true},
        {"texto": "slice()", "correta": false},
        {"texto": "splice()", "correta": false}
      ]
    },
    {
      "id": 62,
      "pergunta": "Qual estrutura de repetição é ideal para iterar sobre as propriedades de um objeto?",
      "opcoes": [
        {"texto": "for...of", "correta": false},
        {"texto": "for...in", "correta": true},
        {"texto": "forEach", "correta": false},
        {"texto": "while", "correta": false}
      ]
    },
    {
      "id": 63,
      "pergunta": "Para que serve a estrutura `switch`?",
      "opcoes": [
        {"texto": "Para iterar sobre arrays.", "correta": false},
        {"texto": "Para selecionar um dos muitos blocos de código a serem executados, com base em uma única variável ou expressão.", "correta": true},
        {"texto": "Para definir o escopo de uma variável.", "correta": false},
        {"texto": "Para trocar os valores de duas variáveis.", "correta": false}
      ]
    },
    {
      "id": 64,
      "pergunta": "Como se define uma função como um método dentro de um objeto literal?",
      "opcoes": [
        {"texto": "{ saudacao: function() { ... } }", "correta": true},
        {"texto": "{ function saudacao() { ... } }", "correta": false},
        {"texto": "{ saudacao = () => { ... } }", "correta": false},
        {"texto": "{ saudacao: saudacao() }", "correta": false}
      ]
    },
    {
      "id": 65,
      "pergunta": "O que o operador ternário (`condicao ? valor1 : valor2`) faz?",
      "opcoes": [
        {"texto": "Declara três variáveis.", "correta": false},
        {"texto": "É um atalho para uma declaração `if...else`.", "correta": true},
        {"texto": "Define uma função.", "correta": false},
        {"texto": "Cria um loop.", "correta": false}
      ]
    },
    {
      "id": 66,
      "pergunta": "Como você cria um novo elemento HTML (ex: `<p>`) via JavaScript?",
      "opcoes": [
        {"texto": "document.newElement('p')", "correta": false},
        {"texto": "document.createElement('p')", "correta": true},
        {"texto": "document.create('p')", "correta": false},
        {"texto": "new HTMLParagraphElement()", "correta": false}
      ]
    },
    {
      "id": 67,
      "pergunta": "Qual propriedade do objeto de evento (`event`) informa qual elemento acionou o evento?",
      "opcoes": [
        {"texto": "event.source", "correta": false},
        {"texto": "event.target", "correta": true},
        {"texto": "event.element", "correta": false},
        {"texto": "event.origin", "correta": false}
      ]
    },
    {
      "id": 68,
      "pergunta": "O que a função `setTimeout(funcao, 1000)` faz?",
      "opcoes": [
        {"texto": "Executa `funcao` 1000 vezes.", "correta": false},
        {"texto": "Executa `funcao` após um atraso de 1000 milissegundos (1 segundo).", "correta": true},
        {"texto": "Executa `funcao` a cada 1000 milissegundos.", "correta": false},
        {"texto": "Pausa todo o script por 1 segundo.", "correta": false}
      ]
    },
    {
      "id": 69,
      "pergunta": "Para que serve um bloco `try...catch`?",
      "opcoes": [
        {"texto": "Para testar se uma condição é verdadeira.", "correta": false},
        {"texto": "Para lidar com erros de forma controlada, permitindo que o código continue a execução mesmo que um erro ocorra.", "correta": true},
        {"texto": "Para criar um loop condicional.", "correta": false},
        {"texto": "Para definir variáveis temporárias.", "correta": false}
      ]
    },
    {
      "id": 70,
      "pergunta": "Qual dos seguintes valores é considerado 'falsy' em JavaScript?",
      "opcoes": [
        {"texto": "'0'", "correta": false},
        {"texto": "0", "correta": true},
        {"texto": "{}", "correta": false},
        {"texto": "[]", "correta": false}
      ]
    },
    {
      "id": 71,
      "pergunta": "Qual método de array remove o primeiro elemento e o retorna?",
      "opcoes": [
        {"texto": "pop()", "correta": false},
        {"texto": "shift()", "correta": true},
        {"texto": "splice()", "correta": false},
        {"texto": "first()", "correta": false}
      ]
    },
    {
      "id": 72,
      "pergunta": "Como adicionar uma classe 'ativo' a um elemento DOM `el`?",
      "opcoes": [
        {"texto": "el.className = 'ativo';", "correta": false},
        {"texto": "el.classList.add('ativo');", "correta": true},
        {"texto": "el.class = 'ativo';", "correta": false},
        {"texto": "el.style.class = 'ativo';", "correta": false}
      ]
    },
    {
      "id": 73,
      "pergunta": "Qual a diferença entre `slice()` e `splice()` em um array?",
      "opcoes": [
        {"texto": "Não há diferença.", "correta": false},
        {"texto": "`slice()` retorna uma cópia de parte do array sem modificar o original, enquanto `splice()` remove ou substitui elementos modificando o array original.", "correta": true},
        {"texto": "`splice()` é para strings e `slice()` para arrays.", "correta": false},
        {"texto": "`slice()` adiciona elementos e `splice()` remove.", "correta": false}
      ]
    },
    {
      "id": 74,
      "pergunta": "O que a função `setInterval(funcao, 1000)` faz?",
      "opcoes": [
        {"texto": "Executa `funcao` uma vez após 1 segundo.", "correta": false},
        {"texto": "Executa `funcao` repetidamente, com um intervalo de 1 segundo entre cada chamada.", "correta": true},
        {"texto": "Executa `funcao` 1000 vezes o mais rápido possível.", "correta": false},
        {"texto": "Define a duração de uma animação para 1 segundo.", "correta": false}
      ]
    },
    {
      "id": 75,
      "pergunta": "Como você anexa um elemento filho `novoEl` a um elemento pai `elPai`?",
      "opcoes": [
        {"texto": "elPai.add(novoEl);", "correta": false},
        {"texto": "elPai.appendChild(novoEl);", "correta": true},
        {"texto": "elPai.attach(novoEl);", "correta": false},
        {"texto": "elPai.insert(novoEl);", "correta": false}
      ]
    },
    {
      "id": 76,
      "pergunta": "Qual método de string retorna o caractere em um índice específico?",
      "opcoes": [
        {"texto": ".index(i)", "correta": false},
        {"texto": ".charAt(i)", "correta": true},
        {"texto": ".get(i)", "correta": false},
        {"texto": ".character(i)", "correta": false}
      ]
    },
    {
      "id": 77,
      "pergunta": "Qual a finalidade da palavra-chave `break` em um loop ou switch?",
      "opcoes": [
        {"texto": "Pular a iteração atual e ir para a próxima.", "correta": false},
        {"texto": "Interromper a execução do loop ou switch imediatamente.", "correta": true},
        {"texto": "Pausar a execução por um tempo.", "correta": false},
        {"texto": "Causar um erro proposital.", "correta": false}
      ]
    },
    {
      "id": 78,
      "pergunta": "Como você adiciona um ouvinte de evento de clique a um botão `btn`?",
      "opcoes": [
        {"texto": "btn.onClick = function() {};", "correta": false},
        {"texto": "btn.addEventListener('click', function() {});", "correta": true},
        {"texto": "btn.listen('click', function() {});", "correta": false},
        {"texto": "btn.attachEvent('click', function() {});", "correta": false}
      ]
    },
    {
      "id": 79,
      "pergunta": "O que é um 'truthy value'?",
      "opcoes": [
        {"texto": "Apenas o valor booleano `true`.", "correta": false},
        {"texto": "Qualquer valor que é considerado `true` em um contexto booleano (ex: um número diferente de zero, uma string não vazia).", "correta": true},
        {"texto": "Uma string que contém a palavra 'true'.", "correta": false},
        {"texto": "Uma variável que foi declarada com `const`.", "correta": false}
      ]
    },
    {
      "id": 80,
      "pergunta": "Qual laço é mais moderno e recomendado para iterar sobre os VALORES de iteráveis como arrays e strings?",
      "opcoes": [
        {"texto": "for...in", "correta": false},
        {"texto": "for...of", "correta": true},
        {"texto": "for (i=0; i<arr.length; i++)", "correta": false},
        {"texto": "while", "correta": false}
      ]
    }
  ],
  "avancado": [
    {
      "id": 81,
      "pergunta": "O que o método de array `reduce()` faz?",
      "opcoes": [
        {"texto": "Reduz o número de elementos no array.", "correta": false},
        {"texto": "Executa uma função 'redutora' para cada elemento do array, resultando em um único valor de retorno (acumulador).", "correta": true},
        {"texto": "Cria um novo array com menos elementos.", "correta": false},
        {"texto": "Filtra o array para remover valores duplicados.", "correta": false}
      ]
    },
    {
      "id": 82,
      "pergunta": "O que acontece quando você usa a sintaxe de classe `extends`?",
      "opcoes": [
        {"texto": "Adiciona novos métodos a uma classe existente.", "correta": false},
        {"texto": "Cria uma 'subclasse' que herda propriedades e métodos de uma 'superclasse'.", "correta": true},
        {"texto": "Exporta a classe para ser usada em outro arquivo.", "correta": false},
        {"texto": "Torna a classe privada.", "correta": false}
      ]
    },
    {
      "id": 83,
      "pergunta": "O que a API `fetch` retorna?",
      "opcoes": [
        {"texto": "Os dados JSON diretamente.", "correta": false},
        {"texto": "Uma Promise que resolve com o objeto Response.", "correta": true},
        {"texto": "Uma callback function.", "correta": false},
        {"texto": "Uma string com o conteúdo da resposta.", "correta": false}
      ]
    },
    {
      "id": 84,
      "pergunta": "O que é 'hoisting' em JavaScript?",
      "opcoes": [
        {"texto": "Uma técnica de otimização de performance.", "correta": false},
        {"texto": "O comportamento padrão do JavaScript de mover declarações (de `var` e `function`) para o topo de seu escopo antes da execução do código.", "correta": true},
        {"texto": "Um erro que ocorre quando uma variável é usada antes de ser declarada.", "correta": false},
        {"texto": "Uma forma de elevar o nível de um evento no DOM.", "correta": false}
      ]
    },
    {
      "id": 85,
      "pergunta": "Qual a finalidade do `localStorage`?",
      "opcoes": [
        {"texto": "Para armazenar dados no servidor.", "correta": false},
        {"texto": "Para armazenar dados chave-valor no navegador que persistem mesmo após o navegador ser fechado.", "correta": true},
        {"texto": "Para armazenar dados apenas durante uma sessão do navegador.", "correta": false},
        {"texto": "Para compartilhar dados entre diferentes usuários.", "correta": false}
      ]
    },
    {
      "id": 86,
      "pergunta": "O que é uma 'Higher-Order Function' (Função de Ordem Superior)?",
      "opcoes": [
        {"texto": "Uma função que é mais performática que as outras.", "correta": false},
        {"texto": "Uma função que recebe outra função como argumento, ou retorna uma função.", "correta": true},
        {"texto": "Uma função declarada com a palavra-chave `class`.", "correta": false},
        {"texto": "Uma função que só pode ser chamada uma vez.", "correta": false}
      ]
    },
    {
      "id": 87,
      "pergunta": "Para que serve o método `.catch()` em uma Promise?",
      "opcoes": [
        {"texto": "Para executar um código após a Promise ser resolvida.", "correta": false},
        {"texto": "Para lidar com erros (quando a Promise é rejeitada).", "correta": true},
        {"texto": "Para encadear múltiplas Promises.", "correta": false},
        {"texto": "Para cancelar a execução de uma Promise.", "correta": false}
      ]
    },
    {
      "id": 88,
      "pergunta": "O que são 'rest parameters' (`...args`)?",
      "opcoes": [
        {"texto": "Uma forma de definir valores padrão para os parâmetros.", "correta": false},
        {"texto": "Permitem que uma função aceite um número indefinido de argumentos como um array.", "correta": true},
        {"texto": "Uma lista de todos os parâmetros restantes que não foram definidos.", "correta": false},
        {"texto": "Expandem um array em parâmetros individuais.", "correta": false}
      ]
    },
    {
      "id": 89,
      "pergunta": "Qual a principal diferença entre `localStorage` e `sessionStorage`?",
      "opcoes": [
        {"texto": "`localStorage` é mais rápido.", "correta": false},
        {"texto": "`localStorage` persiste os dados indefinidamente, enquanto `sessionStorage` limpa os dados quando a sessão da página termina (ex: ao fechar a aba).", "correta": true},
        {"texto": "`sessionStorage` tem um limite de armazenamento maior.", "correta": false},
        {"texto": "Não há diferença funcional.", "correta": false}
      ]
    },
    {
      "id": 90,
      "pergunta": "O que o método `Promise.race()` faz?",
      "opcoes": [
        {"texto": "Resolve quando todas as Promises resolvem.", "correta": false},
        {"texto": "Retorna a primeira Promise que resolver OU rejeitar.", "correta": true},
        {"texto": "Executa as Promises na ordem mais rápida possível.", "correta": false},
        {"texto": "Compara os resultados de duas Promises.", "correta": false}
      ]
    },
    {
      "id": 91,
      "pergunta": "Qual a principal característica do escopo de uma variável declarada com `var`?",
      "opcoes": [
        {"texto": "Escopo de bloco (block scope).", "correta": false},
        {"texto": "Escopo de função (function scope).", "correta": true},
        {"texto": "Escopo global apenas.", "correta": false},
        {"texto": "Escopo léxico.", "correta": false}
      ]
    },
    {
      "id": 92,
      "pergunta": "O que o `constructor` faz dentro de uma `class`?",
      "opcoes": [
        {"texto": "Destrói o objeto quando ele não é mais necessário.", "correta": false},
        {"texto": "É um método especial para criar e inicializar um objeto criado com uma classe.", "correta": true},
        {"texto": "Constrói a herança com outra classe.", "correta": false},
        {"texto": "Conecta a classe ao DOM.", "correta": false}
      ]
    },
    {
      "id": 93,
      "pergunta": "Para que servem os 'default parameters' em uma função?",
      "opcoes": [
        {"texto": "Para definir valores padrão para os parâmetros, caso nenhum valor ou `undefined` seja passado.", "correta": true},
        {"texto": "Para indicar os parâmetros obrigatórios.", "correta": false},
        {"texto": "Para limitar o número de parâmetros que uma função pode receber.", "correta": false},
        {"texto": "Para definir os tipos de dados dos parâmetros.", "correta": false}
      ]
    },
    {
      "id": 94,
      "pergunta": "O que o método `Object.keys()` retorna?",
      "opcoes": [
        {"texto": "Um array com os valores das propriedades de um objeto.", "correta": false},
        {"texto": "Um array com os nomes (chaves) das propriedades enumeráveis de um objeto.", "correta": true},
        {"texto": "Um booleano indicando se o objeto tem chaves.", "correta": false},
        {"texto": "O número de propriedades do objeto.", "correta": false}
      ]
    },
    {
      "id": 95,
      "pergunta": "Qual o propósito da cláusula `finally` em um bloco `try...catch...finally`?",
      "opcoes": [
        {"texto": "Executar um código apenas se um erro ocorrer.", "correta": false},
        {"texto": "Executar um código que sempre será executado, independentemente de ter ocorrido um erro ou não.", "correta": true},
        {"texto": "Definir o erro final a ser lançado.", "correta": false},
        {"texto": "Executar um código apenas se não houver erro.", "correta": false}
      ]
    },
    {
      "id": 96,
      "pergunta": "Como você lida com erros em chamadas `fetch` que retornam status como 404 ou 500?",
      "opcoes": [
        {"texto": "O `.catch()` da Promise será acionado automaticamente.", "correta": false},
        {"texto": "Verificando a propriedade `ok` (ex: `if (!response.ok)`) na resposta da Promise.", "correta": true},
        {"texto": "A Promise `fetch` sempre rejeita em caso de status de erro.", "correta": false},
        {"texto": "Usando um bloco `try...catch` em volta do `fetch`.", "correta": false}
      ]
    },
    {
      "id": 97,
      "pergunta": "O que o método `.find()` faz em um array?",
      "opcoes": [
        {"texto": "Retorna um array com todos os elementos que satisfazem a condição.", "correta": false},
        {"texto": "Retorna o primeiro elemento do array que satisfaz a condição da função de teste.", "correta": true},
        {"texto": "Retorna o índice do primeiro elemento que satisfaz a condição.", "correta": false},
        {"texto": "Retorna um booleano indicando se algum elemento satisfaz a condição.", "correta": false}
      ]
    },
    {
      "id": 98,
      "pergunta": "Qual a diferença entre parâmetros e argumentos de uma função?",
      "opcoes": [
        {"texto": "São a mesma coisa.", "correta": false},
        {"texto": "Parâmetros são as variáveis listadas na definição da função, enquanto argumentos são os valores reais passados para a função quando ela é chamada.", "correta": true},
        {"texto": "Argumentos são usados em arrow functions e parâmetros em funções normais.", "correta": false},
        {"texto": "Parâmetros são opcionais e argumentos são obrigatórios.", "correta": false}
      ]
    },
    {
      "id": 99,
      "pergunta": "O que o método `Object.freeze()` faz?",
      "opcoes": [
        {"texto": "Deleta um objeto.", "correta": false},
        {"texto": "Torna um objeto imutável, impedindo que novas propriedades sejam adicionadas, que propriedades existentes sejam removidas ou que valores sejam alterados.", "correta": true},
        {"texto": "Cria uma cópia 'congelada' de um objeto.", "correta": false},
        {"texto": "Pausa a execução do script.", "correta": false}
      ]
    },
    {
      "id": 100,
      "pergunta": "O que `Set` representa em JavaScript?",
      "opcoes": [
        {"texto": "Uma função para definir o valor de uma variável.", "correta": false},
        {"texto": "Uma coleção de valores únicos, onde cada valor pode ocorrer apenas uma vez.", "correta": true},
        {"texto": "Um tipo especial de array ordenado.", "correta": false},
        {"texto": "Um objeto para configurar o ambiente de execução.", "correta": false}
      ]
    }
  ],
  "especialista": [
    {
      "id": 101,
      "pergunta": "Na Event Loop, qual a diferença de prioridade entre a 'Microtask Queue' (ex: .then) e a 'Macrotask Queue' (ex: setTimeout)?",
      "opcoes": [
        {"texto": "Macrotasks sempre executam antes de Microtasks.", "correta": false},
        {"texto": "Microtasks são executadas ao final de cada Macrotask, antes da próxima renderização, tendo maior prioridade.", "correta": true},
        {"texto": "Elas têm a mesma prioridade e executam na ordem em que foram adicionadas.", "correta": false},
        {"texto": "A prioridade depende do navegador.", "correta": false}
      ]
    },
    {
      "id": 102,
      "pergunta": "O que o método `Promise.allSettled()` faz?",
      "opcoes": [
        {"texto": "Rejeita assim que uma das Promises rejeita.", "correta": false},
        {"texto": "Retorna uma Promise que resolve depois que todas as Promises dadas foram resolvidas ou rejeitadas, com um array de objetos que descrevem o resultado de cada uma.", "correta": true},
        {"texto": "Resolve com o valor da primeira Promise que resolver.", "correta": false},
        {"texto": "Aguarda todas as Promises resolverem, ignorando as que foram rejeitadas.", "correta": false}
      ]
    },
    {
      "id": 103,
      "pergunta": "Para que serve uma 'Generator Function' (`function*`)?",
      "opcoes": [
        {"texto": "Para gerar números aleatórios.", "correta": false},
        {"texto": "Para criar uma função que pode ter sua execução pausada e retomada, permitindo a produção de uma sequência de valores ao longo do tempo.", "correta": true},
        {"texto": "Para gerar automaticamente outras funções.", "correta": false},
        {"texto": "Uma sintaxe alternativa para `async/await`.", "correta": false}
      ]
    },
    {
      "id": 104,
      "pergunta": "O que são `Proxy` objects em JavaScript?",
      "opcoes": [
        {"texto": "Uma forma de se conectar a servidores proxy de rede.", "correta": false},
        {"texto": "Um objeto que envolve outro objeto e intercepta operações fundamentais (como leitura ou atribuição de propriedades), permitindo um controle customizado.", "correta": true},
        {"texto": "Um cache para objetos usados com frequência.", "correta": false},
        {"texto": "Um tipo de objeto que não pode ser modificado.", "correta": false}
      ]
    },
    {
      "id": 105,
      "pergunta": "Qual a principal característica de um `WeakMap`?",
      "opcoes": [
        {"texto": "Ele só aceita strings como chaves.", "correta": false},
        {"texto": "As chaves são 'fracamente' referenciadas, permitindo que o garbage collector remova as entradas se não houver outra referência ao objeto chave.", "correta": true},
        {"texto": "É um mapa que só pode ser acessado por uma única parte do código.", "correta": false},
        {"texto": "Ele tem performance inferior ao `Map` padrão.", "correta": false}
      ]
    },
    {
      "id": 106,
      "pergunta": "O que é 'memoization'?",
      "opcoes": [
        {"texto": "O processo de converter um objeto em uma string.", "correta": false},
        {"texto": "Uma técnica de otimização que armazena os resultados de chamadas de função custosas e retorna o resultado em cache quando as mesmas entradas ocorrem novamente.", "correta": true},
        {"texto": "A alocação de memória para variáveis.", "correta": false},
        {"texto": "O processo de garbage collection.", "correta": false}
      ]
    },
    {
      "id": 107,
      "pergunta": "Qual é a função do método `.bind()`?",
      "opcoes": [
        {"texto": "Executar uma função imediatamente.", "correta": false},
        {"texto": "Criar uma nova função que, quando chamada, tem seu `this` definido com o valor fornecido, com uma sequência de argumentos pré-definida.", "correta": true},
        {"texto": "Conectar dois objetos.", "correta": false},
        {"texto": "Ligar um evento a um elemento do DOM.", "correta": false}
      ]
    },
    {
      "id": 108,
      "pergunta": "Qual a diferença entre CommonJS (`require`/`module.exports`) e ES Modules (`import`/`export`)?",
      "opcoes": [
        {"texto": "Não há diferença funcional.", "correta": false},
        {"texto": "CommonJS é síncrono e foi projetado para o servidor (Node.js), enquanto ES Modules é assíncrono e é o padrão nativo do JavaScript e dos navegadores.", "correta": true},
        {"texto": "CommonJS é para React e ES Modules para Vue.", "correta": false},
        {"texto": "ES Modules são mais antigos que CommonJS.", "correta": false}
      ]
    },
    {
      "id": 109,
      "pergunta": "O que é 'tree shaking'?",
      "opcoes": [
        {"texto": "Uma animação de CSS.", "correta": false},
        {"texto": "Um processo de eliminação de código morto (dead-code elimination) usado por bundlers como Webpack, que remove exportações não utilizadas para reduzir o tamanho do bundle final.", "correta": true},
        {"texto": "Uma forma de reorganizar a árvore do DOM.", "correta": false},
        {"texto": "Um padrão de design para estruturas de dados em árvore.", "correta": false}
      ]
    },
    {
      "id": 110,
      "pergunta": "Para que serve o Optional Chaining Operator (`?.`)?",
      "opcoes": [
        {"texto": "Para criar um loop opcional.", "correta": false},
        {"texto": "Para permitir a leitura de valores de propriedades aninhadas em objetos sem ter que validar explicitamente se cada referência na cadeia é válida.", "correta": true},
        {"texto": "Para definir um parâmetro de função como opcional.", "correta": false},
        {"texto": "Para conectar duas Promises.", "correta": false}
      ]
    },
    {
      "id": 111,
      "pergunta": "O que o Nullish Coalescing Operator (`??`) faz?",
      "opcoes": [
        {"texto": "Funciona como o operador OU (`||`).", "correta": false},
        {"texto": "Retorna o operando do lado direito quando o do lado esquerdo é `null` ou `undefined`, e o do lado esquerdo nos outros casos.", "correta": true},
        {"texto": "Verifica se um valor é estritamente nulo.", "correta": false},
        {"texto": "Converte um valor para `null`.", "correta": false}
      ]
    },
    {
      "id": 112,
      "pergunta": "O que é 'currying'?",
      "opcoes": [
        {"texto": "Um tempero para código.", "correta": false},
        {"texto": "A técnica de transformar uma função que aceita múltiplos argumentos em uma sequência de funções que aceitam um único argumento cada.", "correta": true},
        {"texto": "O processo de armazenar em cache o resultado de uma função.", "correta": false},
        {"texto": "Uma forma de escrever código assíncrono.", "correta": false}
      ]
    },
    {
      "id": 113,
      "pergunta": "Qual a diferença entre os métodos `.call()` e `.apply()`?",
      "opcoes": [
        {"texto": "São idênticos.", "correta": false},
        {"texto": "Ambos invocam uma função com um `this` específico, mas `.call()` aceita uma lista de argumentos, enquanto `.apply()` aceita um array de argumentos.", "correta": true},
        {"texto": "`.call()` é síncrono e `.apply()` é assíncrono.", "correta": false},
        {"texto": "`.apply()` retorna uma nova função e `.call()` a executa imediatamente.", "correta": false}
      ]
    },
    {
      "id": 114,
      "pergunta": "O que a diretiva `'use strict';` faz?",
      "opcoes": [
        {"texto": "Deixa o código mais rápido.", "correta": false},
        {"texto": "Habilita o 'modo estrito', que altera a semântica silenciosa de erros para erros lançados e proíbe certas sintaxes.", "correta": true},
        {"texto": "Permite o uso de TypeScript.", "correta": false},
        {"texto": "Força o uso de `const` em vez de `let`.", "correta": false}
      ]
    },
    {
      "id": 115,
      "pergunta": "O que `Object.create()` permite fazer?",
      "opcoes": [
        {"texto": "Criar uma cópia profunda de um objeto.", "correta": false},
        {"texto": "Criar um novo objeto, usando um objeto existente como o protótipo do novo objeto criado.", "correta": true},
        {"texto": "Criar um objeto a partir de um arquivo JSON.", "correta": false},
        {"texto": "Apenas criar um objeto vazio, como `{}`.", "correta": false}
      ]
    },
    {
      "id": 116,
      "pergunta": "O que é 'debouncing'?",
      "opcoes": [
        {"texto": "Uma forma de encontrar e corrigir bugs.", "correta": false},
        {"texto": "Uma técnica de otimização que agrupa uma sequência de chamadas de função em uma única chamada, executando-a apenas após um certo tempo de inatividade.", "correta": true},
        {"texto": "Um tipo de erro de compilação.", "correta": false},
        {"texto": "Um método para criptografar dados.", "correta": false}
      ]
    },
    {
      "id": 117,
      "pergunta": "Qual é um dos principais casos de uso para `Symbol.iterator`?",
      "opcoes": [
        {"texto": "Para criar um loop infinito.", "correta": false},
        {"texto": "Para definir o comportamento de iteração padrão de um objeto, tornando-o 'iterável' e compatível com o laço `for...of`.", "correta": true},
        {"texto": "Para iterar sobre as propriedades de um objeto.", "correta": false},
        {"texto": "Para encontrar um símbolo específico em uma string.", "correta": false}
      ]
    },
    {
      "id": 118,
      "pergunta": "O que é 'throttling'?",
      "opcoes": [
        {"texto": "É o mesmo que 'debouncing'.", "correta": false},
        {"texto": "Uma técnica de otimização que garante que uma função seja executada no máximo uma vez a cada período de tempo especificado.", "correta": true},
        {"texto": "Um erro que acontece quando muitas funções são chamadas ao mesmo tempo.", "correta": false},
        {"texto": "Uma forma de limitar a quantidade de memória que uma função pode usar.", "correta": false}
      ]
    },
    {
      "id": 119,
      "pergunta": "O que o método `Promise.any()` faz?",
      "opcoes": [
        {"texto": "Retorna a primeira Promise que resolver OU rejeitar.", "correta": false},
        {"texto": "Retorna uma única Promise que resolve assim que uma das Promises no iterável resolver. Se todas forem rejeitadas, ele rejeita.", "correta": true},
        {"texto": "Verifica se alguma Promise no iterável resolveu com sucesso.", "correta": false},
        {"texto": "Executa uma função para cada Promise no iterável.", "correta": false}
      ]
    },
    {
      "id": 120,
      "pergunta": "O que é 'Shadow DOM'?",
      "opcoes": [
        {"texto": "Uma cópia oculta do DOM principal.", "correta": false},
        {"texto": "Uma tecnologia para encapsular o estilo e a marcação de um componente web, mantendo-os separados do resto do DOM do documento.", "correta": true},
        {"texto": "Um tema escuro para o DOM.", "correta": false},
        {"texto": "Uma versão virtual do DOM usada pelo React.", "correta": false}
      ]
    }
  ]
}