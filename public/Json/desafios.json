{
  "iniciante": [
    {
      "Desafio": "Declare uma variável chamada `cidade` com o valor 'São Paulo' e exiba-a no console.",
      "Dica": "Use a palavra-chave `const` para declarar a variável e a função `console.log()` para exibi-la.",
      "Resposta": "```javascript\nconst cidade = 'São Paulo';\nconsole.log(cidade);\n```"
    },
    {
      "Desafio": "Escreva uma estrutura condicional `if/else` que verifique se uma variável `idade` é maior ou igual a 18. Se for, exiba 'Maior de idade'; senão, exiba 'Menor de idade'.",
      "Dica": "Use o operador de comparação `>=` para verificar a idade e blocos `{}` para cada condição.",
      "Resposta": "```javascript\nconst idade = 25;\n\nif (idade >= 18) {\n  console.log('Maior de idade');\n} else {\n  console.log('Menor de idade');\n}\n```"
    },
    {
      "Desafio": "Crie uma função chamada `saudacao` que aceita um parâmetro `nome` e retorna a string 'Olá, [nome]!'. Chame a função e exiba o resultado no console.",
      "Dica": "Use `function` para declarar a função e a palavra-chave `return` para enviar o valor de volta. Template literals (`` ` ``) podem ser úteis aqui.",
      "Resposta": "```javascript\nfunction saudacao(nome) {\n  return `Olá, ${nome}!`;\n}\n\nconst mensagem = saudacao('Maria');\nconsole.log(mensagem); // Exibe 'Olá, Maria!'\n```"
    }
  ],
  "intermediario": [
    {
      "Desafio": "Crie um array chamado `frutas` com três frutas. Use um laço `for` para iterar sobre o array e exibir cada fruta no console.",
      "Dica": "A propriedade `.length` do array será útil para definir a condição de parada do seu laço `for`.",
      "Resposta": "```javascript\nconst frutas = ['Maçã', 'Banana', 'Laranja'];\n\nfor (let i = 0; i < frutas.length; i++) {\n  console.log(frutas[i]);\n}\n```"
    },
    {
      "Desafio": "Crie um objeto chamado `carro` com as propriedades `marca` ('Ford') e `ano` (2020). Acesse e exiba o valor da propriedade `marca` no console.",
      "Dica": "Você pode acessar propriedades de um objeto usando a notação de ponto (ex: `objeto.propriedade`).",
      "Resposta": "```javascript\nconst carro = {\n  marca: 'Ford',\n  ano: 2020\n};\n\nconsole.log(carro.marca); // Exibe 'Ford'\n```"
    },
    {
      "Desafio": "Escreva um script que selecione um elemento HTML com o `id='titulo'` e altere seu texto interno para 'Título Alterado'.",
      "Dica": "Primeiro, use `document.getElementById()` para pegar o elemento. Depois, altere a propriedade `.textContent` ou `.innerText` do elemento.",
      "Resposta": "Supondo que seu HTML tenha `<h1 id='titulo'>Título Original</h1>`:\n\n```javascript\nconst elementoTitulo = document.getElementById('titulo');\nelementoTitulo.textContent = 'Título Alterado';\n```"
    }
  ],
  "avancado": [
    {
      "Desafio": "Dado um array de números, use o método `.map()` para criar um novo array onde cada número é o dobro do valor original.",
      "Dica": "O método `.map()` recebe uma função como argumento. Essa função será chamada para cada item do array e deve retornar o novo valor.",
      "Resposta": "```javascript\nconst numeros = [1, 2, 3, 4, 5];\n\nconst dobrados = numeros.map(function(numero) {\n  return numero * 2;\n});\n\nconsole.log(dobrados); // Exibe [2, 4, 6, 8, 10]\n```"
    },
    {
      "Desafio": "Dado um array de números, use o método `.filter()` para criar um novo array contendo apenas os números pares.",
      "Dica": "A função que você passar para o `.filter()` deve retornar `true` para os elementos que devem ser mantidos. O operador módulo (`%`) é útil para verificar se um número é par.",
      "Resposta": "```javascript\nconst numeros = [1, 2, 3, 4, 5, 6];\n\nconst pares = numeros.filter(function(numero) {\n  return numero % 2 === 0;\n});\n\nconsole.log(pares); // Exibe [2, 4, 6]\n```"
    },
    {
      "Desafio": "Crie uma função que retorna uma `Promise`. A promise deve resolver com a string 'Sucesso!' após 2 segundos. Use `.then()` para exibir a mensagem no console.",
      "Dica": "Dentro da função, crie `new Promise((resolve, reject) => { ... })`. Use `setTimeout` para chamar a função `resolve` após o tempo determinado.",
      "Resposta": "```javascript\nfunction minhaPromessa() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Sucesso!');\n    }, 2000);\n  });\n}\n\nminhaPromessa().then(mensagem => {\n  console.log(mensagem);\n});\n```"
    }
  ],
  "especialista": [
    {
      "Desafio": "Use `async/await` para buscar dados da API pública de usuários do GitHub (`https://api.github.com/users/google`) e exibir o nome (`name`) do usuário no console.",
      "Dica": "Crie uma função `async`. Dentro dela, use `await fetch(...)` para a requisição. Lembre-se que o método `.json()` também retorna uma promise, então você precisará de um segundo `await`.",
      "Resposta": "```javascript\nasync function buscarUsuarioGitHub() {\n  try {\n    const response = await fetch('[https://api.github.com/users/google](https://api.github.com/users/google)');\n    const data = await response.json();\n    console.log(data.name);\n  } catch (error) {\n    console.error('Falha ao buscar dados:', error);\n  }\n}\n\nbuscarUsuarioGitHub();\n```"
    },
    {
      "Desafio": "Crie uma função `criarContador` que demonstre o conceito de 'closure'. A função deve retornar outra função que, a cada chamada, incrementa e retorna um contador interno.",
      "Dica": "A função externa (`criarContador`) declara uma variável de contagem. A função interna, que é retornada, acessa e modifica essa variável. Cada chamada a `criarContador` cria um novo escopo independente.",
      "Resposta": "```javascript\nfunction criarContador() {\n  let contador = 0;\n\n  return function() {\n    contador++;\n    return contador;\n  };\n}\n\nconst contador1 = criarContador();\nconsole.log(contador1()); // 1\nconsole.log(contador1()); // 2\n\nconst contador2 = criarContador();\nconsole.log(contador2()); // 1\n```"
    },
    {
      "Desafio": "Dado um objeto `usuario`, use a desestruturação de objetos para extrair as propriedades `nome` e `idade` para variáveis separadas. Em seguida, use o operador 'spread' (`...`) para criar um novo objeto `usuarioCompleto` que inclua todas as propriedades do `usuario` original mais uma nova propriedade `status: 'ativo'`.",
      "Dica": "Para desestruturar: `const { prop1, prop2 } = objeto;`. Para o spread: `const novoObjeto = { ...objetoOriginal, novaProp: 'valor' };`",
      "Resposta": "```javascript\nconst usuario = {\n  nome: 'Carlos',\n  idade: 30,\n  email: 'carlos@exemplo.com'\n};\n\n// Desestruturação\nconst { nome, idade } = usuario;\nconsole.log(nome); // Carlos\nconsole.log(idade); // 30\n\n// Spread operator\nconst usuarioCompleto = {\n  ...usuario,\n  status: 'ativo'\n};\n\nconsole.log(usuarioCompleto);\n// { nome: 'Carlos', idade: 30, email: 'carlos@exemplo.com', status: 'ativo' }\n```"
    }
  ]
}